name: Deploy Frontend Files

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'                             # Trigger only when web files change
      - '.github/workflows/frontend-deploy.yml'   

  workflow_dispatch:                            # Allow manual triggering from GitHub UI

  workflow_run:
    workflows: ["Frontend Infrastructure"]
    types:
      - completed

jobs:
  deploy-frontend-files:
    name: Deploy Website Files
    runs-on: ubuntu-latest

    env:
      STORAGE_ACCOUNT_NAME: zchresumestrfrontend
      CDN_ENDPOINT_NAME: shecodesclouds
      CDN_PROFILE_NAME: resume-cdn-profile
      RESOURCE_GROUP_NAME: resume-frontend-rg

    steps:
      - name: Checkout
        uses: actions/checkout@v3           # Allow manual triggering from GitHub UI

      # --- Security Scanning Steps Start ---

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM for Frontend
        run: syft frontend -o json > sbom.json

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-frontend
          path: sbom.json

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype Vulnerability Scan
        run: |
          grype sbom:sbom.json -o table --fail-on medium
      
      # --- Security Scanning Steps End ---

      - name: Mask GitHub Token
        run: echo "::add-mask::${{ secrets.GITHUB_TOKEN }}"  # Hide GitHub token in logs

      - name: Mask Azure Subscription ID
        run: echo "::add-mask::${{ secrets.AZURE_SUBSCRIPTION_ID }}"  # Hide subscription ID in logs

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}      # JSON secret containing SP credentials

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2        # Installs Terraform CLI
        with: 
          terraform_version: 1.12.2

      - name: Get Storage Account Name
        id: get-storage
        run: |
          cd iaac
          terraform init -input=false -no-color > /dev/null

          RAW=$(terraform output -raw storage_account_name 2>/dev/null || echo "")
          CLEANED=$(echo "$RAW" | tr -d '\r\n')

          if [[ -z "$CLEANED" ]]; then
            CLEANED="zchresumestrfrontend"
          fi
          echo "storage_account=$CLEANED" >> "$GITHUB_OUTPUT"

      - name: Deploy to Azure Storage
        id: deploy-storage
        env:
          STORAGE_ACCOUNT: ${{ steps.get-storage.outputs.storage_account }}
        run: |
          echo "ðŸ“¤ Uploading website files to storage account: ${STORAGE_ACCOUNT}"

          az storage blob upload-batch \
            --account-name "${STORAGE_ACCOUNT}" \
            --auth-mode login \
            --source ./frontend \
            --destination '$web' \
            --overwrite
          echo "storage_account=${STORAGE_ACCOUNT}" >> "$GITHUB_OUTPUT"

      - name: Get CDN Details
        id: get-cdn
        run: |
          cd iaac
          terraform init -input=false -no-color > /dev/null

          CDN_ENDPOINT=$(terraform output -raw cdn_endpoint_name 2>/dev/null || true)
          CDN_PROFILE=$(terraform output -raw cdn_profile_name 2>/dev/null || true)

          if [[ -z "$CDN_ENDPOINT" ]]; then CDN_ENDPOINT="shecodesclouds"; fi
          if [[ -z "$CDN_PROFILE" ]]; then CDN_PROFILE="resume-cdn-profile"; fi

          echo "cdn_endpoint=$CDN_ENDPOINT" >> "$GITHUB_OUTPUT"
          echo "cdn_profile=$CDN_PROFILE" >> "$GITHUB_OUTPUT"

      - name: Purge CDN Cache
        env:
          RESOURCE_GROUP_NAME: ${{ env.RESOURCE_GROUP_NAME }}
          CDN_PROFILE_NAME: ${{ steps.get-cdn.outputs.cdn_profile }}
          CDN_ENDPOINT_NAME: ${{ steps.get-cdn.outputs.cdn_endpoint }}
        run: |
          echo "ðŸ”„ Purging CDN cache..."
          az cdn endpoint purge \
            --resource-group "${RESOURCE_GROUP_NAME}" \
            --profile-name "${CDN_PROFILE_NAME}" \
            --name "${CDN_ENDPOINT_NAME}" \
            --content-paths "/*" \
            --no-wait

      - name: Deployment Summary
        run: |
          echo "### Frontend Deployed! ðŸŽ¨" >> $GITHUB_STEP_SUMMARY
          echo "- **Files uploaded to**: ${{ steps.deploy-storage.outputs.storage_account }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CDN URL**: https://${{ steps.get-cdn.outputs.cdn_endpoint }}.azureedge.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: CDN cache purge initiated - changes should be live in 2-10 minutes." >> $GITHUB_STEP_SUMMARY

  dependency-scan:
    name: Scan JavaScript Dependencies
    runs-on: ubuntu-latest
    
    defaults:
      run: 
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  

      - name: Install dependencies
        run: npm install
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
